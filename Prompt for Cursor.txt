Model name: Champion Winner - this should be ready to be deployed on github with deployment instructions through github actions or something

Elite Lottery Prediction System Development Prompt
Project Overview
Build a championship-level lottery prediction system focused on creating a consistently winning model through advanced reinforcement learning and temporal sequence analysis. The system will use sophisticated Python-based ML algorithms with a stunning HTML/CSS/JS interface, designed to achieve weekly wins through intelligent pattern recognition and self-improving algorithms.
Core Requirements
1. Python-Powered ML Architecture (Primary Focus)
Advanced Reinforcement Learning Engine:

Build a custom Q-Learning agent with experience replay that learns winning patterns
Implement Deep Q-Network (DQN) with prioritized experience replay
Create a temporal difference learning system that rewards accurate predictions
Design multi-armed bandit algorithms for number selection optimization
Build ensemble RL agents that compete and collaborate for optimal predictions

Core Python Libraries Stack:
# Primary ML Framework
# Reinforcement Learning
# Advanced Analytics
# Time Series & Pattern Recognition  
# Data Processing

Winning-Focused Model Architecture:

Primary Model: Deep Reinforcement Learning agent with custom reward function
Pattern Recognition: LSTM networks that identify recurring number sequences
Frequency Analysis: Statistical models tracking hot/cold number cycles
Temporal Models: Time-series forecasting for draw timing patterns
Ensemble Voting: Weighted combination of top-performing sub-models

Zero Data Leakage Training System:

Implement strict temporal validation (only past data for training)
Create rolling window validation that simulates real prediction scenarios
Build reward system that only activates AFTER actual draw results
Design penalty mechanisms for incorrect predictions
Implement experience replay buffer that stores prediction outcomes

2. Stunning HTML/CSS/JS Frontend
Ultra-Modern Interface Design:

Pure HTML5/CSS3/Vanilla JavaScript (no frameworks)
Glassmorphism design with smooth animations
Advanced CSS Grid and Flexbox layouts
Custom CSS animations for number reveals and predictions
WebGL effects for visualizations and particle systems

Beautiful UI Features:

Elegant light/dark mode toggle with smooth transitions
Animated number balls with physics-based movements
Real-time prediction confidence meters with gradient fills
Interactive charts showing model performance and accuracy
Smooth page transitions and micro-interactions
Mobile-responsive design with touch-friendly controls

3. Champion-Level Model Training Strategy
Reinforcement Learning Training Protocol:

Phase 1: Historical data training with temporal splitting (80% train, 20% validation)
Phase 2: Live prediction mode where model only learns AFTER each draw
Phase 3: Continuous adaptation with weighted recent performance
Reward System: +100 for exact match, +10 for partial matches, -5 for misses
Experience Replay: Store last 1000 prediction outcomes for batch learning


Data Processing with Python:

BeautifulSoup for web scraping lottery results
Pandas for data cleaning and feature engineering
NumPy for numerical computations and matrix operations
SQLite for lightweight local database storage
Pickle for model serialization and checkpointing

4. Winning-Focused Model Components
Multi-Agent Reinforcement Learning System:
# Agent 1: Pattern Recognition Specialist
# Agent 2: Frequency Optimization Agent 
# Agent 3: Prediction Agent

Advanced Feature Engineering:

Rolling statistics (mean, std, skewness) for recent draws
Number gap analysis (time since last appearance)
Positional probability matrices
Cross-correlation between number positions
Seasonal and cyclical pattern detection
Draw day and time influence factors

Ensemble Prediction Logic:

Dynamic weight adjustment based on recent performance
Confidence scoring for each agent's predictions
Meta-learning algorithm that learns which agent to trust when
Voting mechanism with performance-based weighting

5. Beautiful Frontend Implementation
Robust HTML framework
Advanced CSS Styling:
Interactive JavaScript:

6. Python Backend Integration to be deployed on github with instructions in .md file
Data Management System:

7. Weekly Winner Strategy Implementation
Championship Training Protocol:

Adaptive Learning System:

Model learns from each miss to avoid similar patterns
Positive reinforcement for partial and exact matches
Dynamic adjustment of prediction confidence threshold
Weekly performance evaluation and model fine-tuning

GitHub Pages Deployment:

Static HTML/CSS/JS frontend hosted on GitHub Pages
Python backend can run on github
Automated model training scripts
Easy setup with single command deployment

9. Success Metrics & Performance
Victory-Focused KPIs:

Weekly win rate (target: >60% partial matches)
Exact match frequency (target: 1 every 4-6 weeks)
Prediction confidence accuracy correlation
Model learning curve and improvement rate
Return on investment tracking

Continuous Improvement:

Daily model retraining with new data
A/B testing different agent configurations
Performance comparison against random baseline
Historical simulation validation

Create a folder of where i will put the saved csv file where the model will pick each row at a time to train the model and move to the next so once that is done, I will be have the chance to input the current place and the model will retrain itself it did not get it correct till I hit my first million dollars.

So this is the website I will be scraping from https://www.lotto-8.com/canada/listltoCAON49.asp and this is how the numbers are displayed but, you will have to add a test script to scrape it to see how the website displays the data before implementing it in the model building becuase there is a data, winning numbers and bb but I am interest in the winning numbers and only one prediction with metrics of confidence for the prediction for each of the numbers predicted by the model so that I can be sure of what I am doing. The draws of the lottery occurs every wednesdays and saturdays so  the scraping will only happen twice in a week and if the website is not more there should be some sort of feedback on the app to show that I have to change the website so this will be my back up website so the test script will test that too https://www.theluckygene.com/LotteryResults?gid=Ontario49Game 